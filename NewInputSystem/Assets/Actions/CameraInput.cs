//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Actions/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""CameraMovement"",
            ""id"": ""308dfa03-37d9-45c4-8dda-3ab2705b4179"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""45b6aa8f-b2ae-4e8a-8fc0-c594df5b8fab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c9dbc14e-d809-4621-afb3-364fda0018bd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a6b64728-dc8f-4e0c-95ed-c38640a655f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ffd7ae31-dd2f-4317-82ca-e115bd24a5df"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d5eaa33f-9b98-487d-94ff-843a619ffc13"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""519e2ddb-9263-42ea-b3fa-a63f3b182d71"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e7aa1756-fe4a-4739-9734-b1d80b66a4ca"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraActions"",
            ""id"": ""58aba299-9f6f-4f45-9a3d-6d96a1b88fb3"",
            ""actions"": [
                {
                    ""name"": ""FocusOnPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""146193b9-6005-4da9-8d1f-25b696ae0651"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f1244b6-0ab0-4401-a88d-63f5b6c284e5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FocusOnPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f3977a0-8c6a-4e75-8c5e-161742188c6d"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FocusOnPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraZooming"",
            ""id"": ""340f1d5a-b413-456d-a8bb-39c70f8efc40"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""171dddf9-5c42-476e-aaa2-d55bc85461c0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8defd64f-65ce-4675-b0fc-2b1dec7f22a7"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d3330fc7-af8c-4586-a2d3-090e9e81a2b1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e0ec1ca5-9df6-4ccd-b6c2-76eb42c49acf"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2fc0b9d0-7a92-4b79-8029-e6ab6b583d8a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e28919b5-80a9-4ba1-80ce-96c881be1f6b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-2,max=2)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fac20ca9-b00c-48ed-9eed-f16f21973086"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""32f4cc1b-2fee-4ee5-9d51-9433aa1984d4"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CameraRotation"",
            ""id"": ""1e68dcde-c0be-4e9a-9c9b-64f8ace26eaf"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""c5509cc4-23b3-4fcd-a0fb-644755704479"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""789dca9b-6ff9-4d3b-a478-77aa4934c36a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""10a7c036-13bb-470d-af96-5f02e9a55f10"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f23b24e5-23b4-4d44-855c-bd9fed95b18e"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""80dd9ff0-600b-4fd9-a4ee-eee5ce19ad17"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7e46fb19-8d0c-4150-a0b4-a29f64fdea27"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""84184ceb-2c03-4bf9-9694-a019169a2e6a"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraMovement
        m_CameraMovement = asset.FindActionMap("CameraMovement", throwIfNotFound: true);
        m_CameraMovement_HorizontalMovement = m_CameraMovement.FindAction("HorizontalMovement", throwIfNotFound: true);
        // CameraActions
        m_CameraActions = asset.FindActionMap("CameraActions", throwIfNotFound: true);
        m_CameraActions_FocusOnPlayer = m_CameraActions.FindAction("FocusOnPlayer", throwIfNotFound: true);
        // CameraZooming
        m_CameraZooming = asset.FindActionMap("CameraZooming", throwIfNotFound: true);
        m_CameraZooming_Zoom = m_CameraZooming.FindAction("Zoom", throwIfNotFound: true);
        // CameraRotation
        m_CameraRotation = asset.FindActionMap("CameraRotation", throwIfNotFound: true);
        m_CameraRotation_Rotate = m_CameraRotation.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraMovement
    private readonly InputActionMap m_CameraMovement;
    private ICameraMovementActions m_CameraMovementActionsCallbackInterface;
    private readonly InputAction m_CameraMovement_HorizontalMovement;
    public struct CameraMovementActions
    {
        private @CameraInput m_Wrapper;
        public CameraMovementActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMovement => m_Wrapper.m_CameraMovement_HorizontalMovement;
        public InputActionMap Get() { return m_Wrapper.m_CameraMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICameraMovementActions instance)
        {
            if (m_Wrapper.m_CameraMovementActionsCallbackInterface != null)
            {
                @HorizontalMovement.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnHorizontalMovement;
            }
            m_Wrapper.m_CameraMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalMovement.started += instance.OnHorizontalMovement;
                @HorizontalMovement.performed += instance.OnHorizontalMovement;
                @HorizontalMovement.canceled += instance.OnHorizontalMovement;
            }
        }
    }
    public CameraMovementActions @CameraMovement => new CameraMovementActions(this);

    // CameraActions
    private readonly InputActionMap m_CameraActions;
    private ICameraActionsActions m_CameraActionsActionsCallbackInterface;
    private readonly InputAction m_CameraActions_FocusOnPlayer;
    public struct CameraActionsActions
    {
        private @CameraInput m_Wrapper;
        public CameraActionsActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FocusOnPlayer => m_Wrapper.m_CameraActions_FocusOnPlayer;
        public InputActionMap Get() { return m_Wrapper.m_CameraActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActionsActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActionsActions instance)
        {
            if (m_Wrapper.m_CameraActionsActionsCallbackInterface != null)
            {
                @FocusOnPlayer.started -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnFocusOnPlayer;
                @FocusOnPlayer.performed -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnFocusOnPlayer;
                @FocusOnPlayer.canceled -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnFocusOnPlayer;
            }
            m_Wrapper.m_CameraActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FocusOnPlayer.started += instance.OnFocusOnPlayer;
                @FocusOnPlayer.performed += instance.OnFocusOnPlayer;
                @FocusOnPlayer.canceled += instance.OnFocusOnPlayer;
            }
        }
    }
    public CameraActionsActions @CameraActions => new CameraActionsActions(this);

    // CameraZooming
    private readonly InputActionMap m_CameraZooming;
    private ICameraZoomingActions m_CameraZoomingActionsCallbackInterface;
    private readonly InputAction m_CameraZooming_Zoom;
    public struct CameraZoomingActions
    {
        private @CameraInput m_Wrapper;
        public CameraZoomingActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_CameraZooming_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_CameraZooming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraZoomingActions set) { return set.Get(); }
        public void SetCallbacks(ICameraZoomingActions instance)
        {
            if (m_Wrapper.m_CameraZoomingActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_CameraZoomingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public CameraZoomingActions @CameraZooming => new CameraZoomingActions(this);

    // CameraRotation
    private readonly InputActionMap m_CameraRotation;
    private ICameraRotationActions m_CameraRotationActionsCallbackInterface;
    private readonly InputAction m_CameraRotation_Rotate;
    public struct CameraRotationActions
    {
        private @CameraInput m_Wrapper;
        public CameraRotationActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_CameraRotation_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_CameraRotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraRotationActions set) { return set.Get(); }
        public void SetCallbacks(ICameraRotationActions instance)
        {
            if (m_Wrapper.m_CameraRotationActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_CameraRotationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public CameraRotationActions @CameraRotation => new CameraRotationActions(this);
    public interface ICameraMovementActions
    {
        void OnHorizontalMovement(InputAction.CallbackContext context);
    }
    public interface ICameraActionsActions
    {
        void OnFocusOnPlayer(InputAction.CallbackContext context);
    }
    public interface ICameraZoomingActions
    {
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface ICameraRotationActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
}
